" Plugins List {{{
if &compatible
	set nocompatible
endif

set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

if dein#load_state('~/.cache/dein')
	call dein#begin('~/.cache/dein')

	call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

	" Add or remove your plugins here like this:
	"call dein#add('Shougo/neosnippet.vim')
	"call dein#add('Shougo/neosnippet-snippets')
	call dein#add('wsdjeg/dein-ui.vim')
	call dein#add('connorholyday/vim-snazzy')
	call dein#add('itchyny/lightline.vim')
	call dein#add('psliwka/vim-smoothie')
	call dein#add('simnalamburt/vim-mundo')
	call dein#add('easymotion/vim-easymotion')
	call dein#add('neoclide/coc.nvim', {'merged':0, 'rev': 'release'})
	call dein#add('tyru/caw.vim')

	call dein#end()
	call dein#save_state()
endif
" }}}

" General {{{
filetype plugin indent on
syntax enable
syntax on
augroup ft_vim
	au!
	au FileType vim setlocal foldmethod=marker
augroup END

set number
set relativenumber
set cursorline
set wrap
set showcmd
set wildmenu
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase
set hidden
set nobackup
set nowritebackup
set cmdheight=2
set updatetime=300
set shortmess+=c
set signcolumn=yes

"colorscheme snazzy
let mapleader="\<Space>"
" }}} General

" Plugins Config {{{
" lightline {{{
let g:lightline = {
			\ 'colorscheme': 'snazzy',
			\ }
" }}}

" vim-mundo {{{
set undofile
set undodir=~/.config/nvim/undo
" }}}

" coc.nvim {{{
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1] =~# '\s'
endfunction


function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder.
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

command! -nargs=0 Format :call CocAction('format')

command! -nargs=? Fold :call CocAction('fold', <f-args>)

command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" }}}
" }}}

" Keybindings {{{
inoremap <silent><expr> <TAB>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<TAB>" :
			\ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <C-Space> coc#refresh()
if exists('*complete_info')
	inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
nnoremap n nzz
nnoremap N Nzz

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)


nmap <silent> K :call <SID>show_documentation()<CR>
map S :w<CR>
nmap <LEADER>rn <Plug>(coc-rename)
xmap <LEADER>f  <Plug>(coc-format-selected)
nmap <LEADER>f  <Plug>(coc-format-selected)
map <LEADER>e :e ~/.config/nvim/init.vim<CR>
map <LEADER>s :source ~/.config/nvim/init.vim<CR>
map <LEADER><CR> :nohlsearch<CR>
xmap <LEADER>a  <Plug>(coc-codeaction-selected)
nmap <LEADER>a  <Plug>(coc-codeaction-selected)
nmap <LEADER>ac  <Plug>(coc-codeaction)
nmap <LEADER>qf  <Plug>(coc-fix-current)
nnoremap <silent> <LEADER>la :<C-u>CocList diagnostics<cr>
nnoremap <silent> <LEADER>le :<C-u>CocList extensions<cr>
nnoremap <silent> <LEADER>lc :<C-u>CocList commands<cr>
nnoremap <silent> <LEADER>lo :<C-u>CocList outline<cr>
nnoremap <silent> <LEADER>ls :<C-u>CocList -I symbols<cr>
nnoremap <silent> <LEADER>lj :<C-u>CocNext<CR>
nnoremap <silent> <LEADER>lk :<C-u>CocPrev<CR>
nnoremap <silent> <LEADER>lp :<C-u>CocListResume<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> sl :set splitright<CR>:vsplit<CR>
nmap <silent> sk :set nosplitbelow<CR>:split<CR>
nmap <silent> sj :set splitbelow<CR>:split<CR>
nmap <silent> sV <C-w>t<C-w>H
nmap sH <C-w>t<C-w>K

" tab
map te :tabe<CR>
map tc :tabclose<CR>
map E :-tabnext<CR>
map R :+tabnext<CR> 

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

map <up> :resize+5<CR>
map <down> :resize-5<CR>
map <left> :vertical resize+5<CR>
map <right> :vertical resize+5<CR>



xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
map <F5> :MundoToggle<CR>

" }}}



