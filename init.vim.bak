



" Plugins Config {{{


" coc.nvim {{{
function! s:check_back_space() abort
	let col = col('.') - 1
	return !col || getline('.')[col - 1] =~# '\s'
endfunction


function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	else
		call CocAction('doHover')
	endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

augroup mygroup
	autocmd!
	" Setup formatexpr specified filetype(s).
	autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
	" Update signature help on jump placeholder.
	autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

command! -nargs=0 Format :call CocAction('format')

command! -nargs=? Fold :call CocAction('fold', <f-args>)

command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" }}}
" }}}

" Keybindings {{{
inoremap <silent><expr> <TAB>
			\ pumvisible() ? "\<C-n>" :
			\ <SID>check_back_space() ? "\<TAB>" :
			\ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
inoremap <silent><expr> <C-Space> coc#refresh()
if exists('*complete_info')
	inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
	inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif
nnoremap n nzz
nnoremap N Nzz

nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)


nmap <silent> K :call <SID>show_documentation()<CR>
map S :w<CR>
nmap <LEADER>rn <Plug>(coc-rename)
xmap <LEADER>f  <Plug>(coc-format-selected)
nmap <LEADER>f  <Plug>(coc-format-selected)
map <LEADER>e :e ~/.config/nvim/init.vim<CR>
map <LEADER>s :source ~/.config/nvim/init.vim<CR>
map <LEADER><CR> :nohlsearch<CR>
xmap <LEADER>a  <Plug>(coc-codeaction-selected)
nmap <LEADER>a  <Plug>(coc-codeaction-selected)
nmap <LEADER>ac  <Plug>(coc-codeaction)
nmap <LEADER>qf  <Plug>(coc-fix-current)
nnoremap <silent> <LEADER>la :<C-u>CocList diagnostics<cr>
nnoremap <silent> <LEADER>le :<C-u>CocList extensions<cr>
nnoremap <silent> <LEADER>lc :<C-u>CocList commands<cr>
nnoremap <silent> <LEADER>lo :<C-u>CocList outline<cr>
nnoremap <silent> <LEADER>ls :<C-u>CocList -I symbols<cr>
nnoremap <silent> <LEADER>lj :<C-u>CocNext<CR>
nnoremap <silent> <LEADER>lk :<C-u>CocPrev<CR>
nnoremap <silent> <LEADER>lp :<C-u>CocListResume<CR>
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gt <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)






xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)
map <F5> :MundoToggle<CR>

" }}}



